       title: "SPDX v3"
     package: "http://spdx.org/spdx/v3/document"
     version: "spdx-3-model 2022-09-20"
 description: "This information model defines the serialized structure of SPDXv3 logical model types"
     license: "CC0-1.0"
     exports: ["Payload", "Elements"]
      config: {"$FieldName": "^[a-zA-Z@][_A-Za-z0-9]{0,63}$"}

Elements = ArrayOf(Element) unique                // Serialized set of independent Element values

Payload = Record                                  // Serialized file (or equivalent) for transferring Elements
   1 namespace        IRI optional                // Default namespace for Element ids in this file (rdf BASE)
   2 prefixes         NamespaceMap optional       // Namespace abbreviations used in this file (rdf PREFIX)
   3 creator          Link(Element) optional      // File creation info and element defaults - Link(Actor)
   4 created          DateTime optional           // File creation info and element defaults
   5 specVersion      SemVer optional             // File creation info and element defaults
   6 profiles         ProfileIdentifier [0..*]    // File creation info and element defaults
   7 dataLicense      LicenseId optional          // File creation info and element defaults
   8 elements         Element [1..*]              // Element values, defined in this file or copied
   9 spdxDocumentId   Link(Element) optional      // SpdxDocument Id that describes this file
  10 spdxDocumentRefs Link(Element) [0..*]        // SpdxDocument Ids that describe referenced files

NamespaceMap = MapOf(Prefix, IRI)

Element = Record
   1 id               Key(IRI)                    // Element unique identifier
   2 type             ElementType                 // Element type and type-specific properties
   3 creator          Link(Element) optional      // required: explicit or default - Link(Actor)
   4 created          DateTime optional           // required: explicit or default
   5 specVersion      SemVer optional             // required: explicit or default
   6 profiles         ProfileIdentifier [0..*]    // required: explicit or default
   7 dataLicense      LicenseId optional          // required: explicit or default
   8 name             String optional
   9 summary          String optional
  10 description      String optional
  11 comment          String optional
  12 verifiedUsing    IntegrityMethod [0..*]      // Applies only to Artifacts
  13 externalReferences ExternalReference [0..*]
  14 externalIdentifiers ExternalIdentifier [0..*]
  15 extensions       Extensions optional

ElementType = Choice
   1 annotation       Annotation
   2 relationship     Relationship
   3 actor            Actor
   4 identity         Identity                    // Abstract "Subject"
   5 spdxDocument     SpdxDocument                // <- Collection: A file containing serialized element values
   6 bom              BOM                         // <- Collection
  10 snippet          Snippet                     // <- Artifact: pkg:Software
  11 file             File                        // <- Artifact: pkg:Software
  12 package          Package                     // <- Artifact: pkg:Software
  13 sbom             SBOM                        // <- BOM: pkg:Software
  14 license          License                     // pkg:License

Annotation = Record
   1 annotationType   AnnotationType
   2 subject          Link(Element)
   3 statement        String optional

Relationship = Record
   1 relationshipType RelationshipType            // just 'type'
   2 from             Link(Element)
   3 to               Link(Element) [1..*]
   4 completeness     RelationshipCompleteness optional

Actor = ArrayOf(ActorIdentifier)

ActorIdentifier = Choice
    1 person          Identifier
    2 organization    Identifier
    3 tool            Identifier

Identifier = Choice
    0 id              String                      // Unspecified identifier kind
    1 name            String                      // Common name, not unique
    2 email           Email                       // rfc2822 address syntax, not necessarily active
    3 uri             String                      // Identifier, not necessarily a resource

Identity = Choice
   1 person           Person
   2 organization     Organization
   3 tool             Tool

SpdxDocument = Record                             // Statements about a serialized file. "verifiedUsing" is required.
   1 namespace        IRI optional                // Default namespace for Element ids in the SPDX file (rdf BASE)
   2 prefixes         NamespaceMap optional       // Namespace abbreviations used in the SPDX file (rdf PREFIX)
   3 elements         Link(Element) [1..*]        // Elements contained in the payload
   4 downloadLocation URL optional                // Unique ID or Location(s) of the payload

BOM = Record
   1 elements         Link(Element) [1..*]        // <-Collection
   2 rootElements     Link(Element) [0..*]        // <-Collection  This element is a root. Other containers that it contains?

Snippet = Record
   1 location         SnippetLocation
   2 snippetPurpose   SoftwarePurpose [0..*]
   3 originator       Link(Element) [0..*]        // <-Artifact:  Link(Actor)

File = Record
   1 contentType      MediaType optional
   2 filePurpose      SoftwarePurpose [0..*]
   3 originator       Link(Element) [0..*]        // <-Artifact:  Link(Actor)

Package = Record
   1 packagePurpose   SoftwarePurpose [0..*]
   2 downloadLocation URL optional
   3 homePage         URL optional
   4 originator       Link(Element) [0..*]        // <-Artifact:  Link(Actor)

SBOM = Record
   1 elements         Link(Element) [1..*]        // <-Collection
   2 rootElements     Link(Element) [0..*]        // <-Collection

License = Record
   1 licenseId        String
   2 source           URL [1..*]
   3 isOsiApproved    Boolean
   4 isFsfLibre       Boolean
   5 isDeprecatedLicenseId Boolean
   6 reference        URL optional
   7 detailsUrl       URL optional

Person = Record

Organization = Record

Tool = Record
   1 userAgent        String

IntegrityMethod = Choice
   1 hashes           Hashes
   2 signature        PublicKeySignature          // A public key by itself is not a checksum

Hashes = Map{1..*}
   1 md5              Binary{16..16} /x optional
   2 sha1             Binary{20..20} /x optional
   3 sha256           Binary{32..32} /x optional

PublicKeySignature = Record

Extensions = MapOf(IRI, String)                   // Extensions are opaque strings

DateTime = String                                 // implement Integer /datetime_ms

Email = String /email

MediaType = String

Prefix = String{1..16}                            // Abbreviation for document namespace

SemVer = String{pattern="^(\d{1,4})\.(\d{1,6})$"} // m.n: "3.141592" is valid, "3.14159262" is not.

SnippetLocation = Record

IRI = String /iri                                 // Element id:  local, prefix:local, or absolute-IRI
// IRI = String                                      // Python JSON Schema incorrectly rejects URNs

URL = String /uri                                 // IRI, must be a locator

AnnotationType = Enumerated
   0 OTHER
   1 REVIEW

ExternalReference = Record
   1 type             ExternalReferenceType
   2 locator          IRI                         // URL - must be a locator
   3 contentType      MediaType optional
   4 comments         String optional

ExternalIdentifierType = Enumerated
   0 OTHER
   1 CPE-2.2
   2 CPE-2.3
   3 PURL
   4 SWID
   5 SWHID
   6 GITOID

ExternalReferenceType = Enumerated                // Invalid without at least one defined value
   0 OTHER
   1 ALT_DOWNLOAD_LOCATION
   2 SECURITY_ADVISORY
   3 SECURITY_FIX
   4 SECURITY_OTHER

LicenseId = Enumerated                            // From license list: referenceNumber, licenseId  // name
 451 Apache-2.0                                   // Apache License 2.0
 457 CC0-1.0                                      // Creative Commons Zero v1.0 Universal

ProfileIdentifier = Enumerated                    // Shown as "pkg" on logical model diagram, use upper case names?
   1 Core
   2 Software
   3 License                                      // TBSL

RelationshipCompleteness = Enumerated
   1 KNOWN
   2 INCOMPLETE
   3 UNKNOWN

RelationshipType = Enumerated
   0 OTHER
   1 DESCRIBES
   2 AMENDS
   3 CONTAINS
   4 ANCESTOR
   5 DESCENDANT     // Don't need both ANCESTOR and DESCENDANT?
   6 DEPENDS_ON
   7 BUILD_DEPENDENCY
   8 DEV_DEPENDENCY
   9 OPTIONAL_DEPENDENCY
  10 PROVIDED_DEPENDENCY
  11 TEST_DEPENDENCY
  12 RUNTIME_DEPENDENCY
  13 DEPENDENCY_MANIFEST
  14 DYNAMIC_LINK
  15 STATIC_LINK
  16 PREREQUISITE
  17 BUILD_TOOL
  18 DEV_TOOL
  19 TEST_TOOL
  20 GENERATES
  21 DISTRIBUTION_ARTIFACT
  22 EXAMPLE
  23 DATA_FILE
  24 TEST_CASE
  25 DOCUMENTATION
  26 METAFILE
  27 TEST
  28 OPTIONAL_COMPONENT
  29 PACKAGES
  30 PATCH
  31 COPY
  32 EXPANDED_FROM_ARCHIVE
  33 FILE_ADDED
  34 FILE_DELETED
  35 FILE_MODIFIED
  36 SUPPLIED_BY                                  // 3.0

SoftwarePurpose = Enumerated
   0 OTHER
   1 APPLICATION
   2 ARCHIVE
   3 BOM
   4 CONFIGURATION
   5 CONTAINER
   6 DATA
   7 DEVICE
   8 DOCUMENTATION
   9 EXECUTABLE
  10 FILE
  11 FRAMEWORK
  12 INSTALL
  13 LIBRARY
  14 MODULE
  15 OPERATING-SYSTEM
  16 PATCH
  17 SOURCE
